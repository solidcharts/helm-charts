{{- if .Values.storeGateway.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "thanos.storeGateway.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "thanos.storeGateway.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "thanos.storeGateway.serviceNameHeadless" . }}
  replicas: {{ .Values.storeGateway.replicas }}
  {{- with .Values.storeGateway.updateStrategy }}
  updateStrategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "thanos.storeGateway.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "thanos.storeGateway.selectorLabels" . | nindent 8 }}
      {{- with .Values.storeGateway.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.objstoreConfig.create (gt (len .Values.storeGateway.podAnnotations) 0) }}
      annotations:
      {{- if .Values.objstoreConfig.create }}
        checksum/config: {{ include "thanos.objstoreConfigHash" . }}
      {{- end }}
      {{- with .Values.storeGateway.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "thanos.storeGateway.serviceAccountName" . }}
      {{- with .Values.storeGateway.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.storeGateway.priorityClassName }}
      priorityClassName: {{ . | quote }}
      {{- end }}
      {{- with .Values.storeGateway.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ . }}
      {{- end }}
      containers:
        - name: thanos-store-gateway
          {{- with .Values.storeGateway.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: {{ include "thanos.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: HOST_IP_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          {{- with .Values.storeGateway.extraEnv }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          args:
            - store
            - --log.level={{ .Values.logLevel }}
            - --log.format={{ .Values.logFormat }}
            - {{ printf "--grpc-address=0.0.0.0:%d" (int .Values.storeGateway.containerPorts.grpc) }}
            - {{ printf "--http-address=0.0.0.0:%d" (int .Values.storeGateway.containerPorts.http) }}
            - --data-dir=/var/thanos/store
            - --objstore.config-file=/etc/thanos/objstore.yaml
          {{- if .Values.autoGomemlimit.enabled }}
            - --enable-auto-gomemlimit
          {{- with .Values.autoGomemlimit.ratio }}
            - --auto-gomemlimit.ratio={{ . }}
          {{- end }}
          {{- end }}
          {{- with .Values.storeGateway.extraArgs }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: grpc
              protocol: TCP
              containerPort: {{ .Values.storeGateway.containerPorts.grpc }}
            - name: http
              protocol: TCP
              containerPort: {{ .Values.storeGateway.containerPorts.http }}
          livenessProbe:
            {{- toYaml .Values.storeGateway.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.storeGateway.readinessProbe | nindent 12 }}
          volumeMounts:
            - mountPath: /etc/thanos/objstore.yaml
              name: objstore-config
              subPath: {{ .Values.objstoreConfig.key }}
              readOnly: true
            - mountPath: /var/thanos/store
              name: data
              readOnly: false
          {{- with .Values.storeGateway.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.storeGateway.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: objstore-config
          secret:
            secretName: {{ include "thanos.objstoreConfigSecretName" . }}
      {{- if not .Values.storeGateway.persistence.enabled }}
        - name: data
          emptyDir: {}
      {{- end }}
      {{- with .Values.storeGateway.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with (include "shared.nodeSelector" (dict "component" .Values.storeGateway "commons" .Values.commons)) }}
      nodeSelector:
        {{- . | nindent 8 }}
      {{- end }}
      {{- with (include "shared.affinity" (dict "component" .Values.storeGateway "commons" .Values.commons)) }}
      affinity:
        {{- . | nindent 8 }}
      {{- end }}
      {{- with (include "shared.topologySpreadConstraints" (dict "component" .Values.storeGateway "commons" .Values.commons)) }}
      topologySpreadConstraints:
        {{- . | nindent 8 }}
      {{- end }}
      {{- with (include "shared.tolerations" (dict "component" .Values.storeGateway "commons" .Values.commons)) }}
      tolerations:
        {{- . | nindent 8 }}
      {{- end }}
  {{- if .Values.storeGateway.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "thanos.storeGateway.selectorLabels" . | nindent 10 }}
        {{- with .Values.storeGateway.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        {{- if .Values.storeGateway.persistence.storageClass }}
        storageClassName: {{ .Values.storeGateway.persistence.storageClass }}
        {{- end }}
        accessModes:
          - {{ .Values.storeGateway.persistence.accessMode }}
        resources:
          requests:
            storage: {{ .Values.storeGateway.persistence.size }}
  {{- if (eq (include "shared.pvc.persistentVolumeClaimRetentionPolicySupported" .) "true") }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ ternary "Retain" "Delete" .Values.storeGateway.persistence.retainDeleted }}
    whenScaled: {{ ternary "Retain" "Delete" .Values.storeGateway.persistence.retainScaled }}
  {{- end }}
  {{- end }}
{{- end -}}
