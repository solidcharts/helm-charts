## -- Global parameters
global:
  ## -- Global Image registry
  imageRegistry: ""

nameOverride: ~
fullnameOverride: ~

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  # -- Image registry
  registry: quay.io
  # -- Image repository
  repository: thanos/thanos
  # -- Pull policy for images.
  pullPolicy: IfNotPresent
  # -- Image tag version (if not specified, it will use the chart appVersion)
  tag: v0.39.2
  # -- Set image digest
  digest: ~

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

components:
  # -- Node selector labels for scheduling for all components.
  nodeSelector: {}

  # -- Affinity settings for scheduling the all components.
  affinity: {}

  # -- Topology spread constraints for scheduling for all components.
  topologySpreadConstraints: []

  # -- Node taints the query pod will tolerate for scheduling for all components.
  tolerations: []

# -- _Kubernetes_ cluster domain.
clusterDomain: cluster.local

objstoreConfig:
  # -- If `true`, create a `Secret` for the objstore store configuration.
  create: true
  # -- (string) If this is set and `objstoreConfig.create` is `true` this will be used for the created secret name, if this is set and `objstoreConfig.create` is `false` then this will define an existing secret to use.
  name:
  # -- Secret key for the objstore configuration.
  key: config
  # -- Objstore configuration; this can either be a string or a map. The default values are not suitable for production.
  value: |-
    type: FILESYSTEM
    config:
      directory: /var/thanos/store/s3

# -- Log level for _Thanos_ components.
logLevel: info

# -- Log format for _Thanos_ components.
logFormat: logfmt

autoGomemlimit:
  # -- If `true`, enable the go runtime to automatically limit memory consumption for all Thanos components by setting GOMEMLIMIT.
  enabled: false
  # -- (float) The ratio of reserved GOMEMLIMIT memory to the detected maximum container or system memory.
  ratio:

# -- If `true`, configure the store endpoints with `--endpoint-group` so they're queried round-robin rather than fanout.
storeEndpointGroup: false

# -- Additional replica labels external to the chart.
additionalReplicaLabels: []

# -- Additional endpoints external to the chart to be configured with `--endpoint`.
additionalEndpoints: []

# -- Additional endpoint groups external to the chart to be configured with `--endpoint-group`.
additionalEndpointGroups: []

serviceMonitor:
  # -- If `true`, create `ServiceMonitor` resources to support collecting metrics via the Prometheus Operator
  enabled: false
  # -- Additional labels for the service monitor.
  labels: {}
  # -- Label to use as the `jobLabel`.
  jobLabel: app.kubernetes.io/component
  # -- Endpoint configuration for the service monitor endpoint.
  endpointConfig:
    path: /metrics

query:
  # -- If `true`, create component.
  enabled: true

  serviceAccount:
    # -- If `true`, create a new `ServiceAccount` for the query component.
    create: true
    # -- (string) If this is set and `compact.serviceAccount.create` is `true` this will be used for the created query component service account name, if this is set and `compact.serviceAccount.create` is `false` then this will define an existing service account to use for the query component.
    name:
    # -- Labels to add to the query service account.
    labels: {}
    # -- Annotations to add to the query service account.
    annotations: {}
    # -- Automount API credentials for the query service account.
    automountToken: false

  service:
    # -- Service type
    type: ClusterIP
    # -- Service ports
    ports:
      http: 10902
      grpc: 10901
    # -- Annotations to add to service.
    annotations: {}
    # -- (string) Traffic distribution for the query service.
    trafficDistribution:

  ingress:
    # -- If `true`, create an `Ingress` for the query service.
    enabled: false
    # -- Annotations to add to the query service ingress.
    annotations: {}
    # -- Ingress class name for the query service ingress.
    ingressClassName:
    # -- Hosts for the query service ingress.
    # @default -- See _values.yaml_
    hosts:
      - host: thanos-query.local
        paths:
          - path: /
            pathType: Prefix
    #   - chart-example.local
    # -- TLS configuration for the query service ingress.
    # @default -- See _values.yaml_
    tls: []
    #   - hosts:
    #       - chart-example.local
    #     secretName: chart-example-tls

  # -- Number of query replicas to create.
  replicas: 1

  # -- Update strategy for the query deployment.
  updateStrategy: {}

  autoscaling:
    # -- If `true`, create a `HorizontalPodAutoscaler` for the query deployment.
    enabled: false
    # -- Minimum number of query replicas that the HPA should maintain.
    minReplicas: 1
    # -- Maximum number of query replicas that the HPA should create.
    maxReplicas: 3
    # -- Target CPU utilisation percentage for the query pod.
    targetCPUUtilizationPercentage: 80
    # -- (int) Target memory utilisation percentage for the query pod.
    targetMemoryUtilizationPercentage:

  pdb:
    # -- If `true`, create a `PodDisruptionBudget` for the query deployment.
    enabled: false
    # -- (string) Minimum number of query replicas that the PDB should require to be available.
    minAvailable:
    # -- (string) Maximum number of query replicas that the PDB should allow to be unavailable.
    maxUnavailable:
    # -- (string) Unhealthy pod eviction policy for the query PDB.
    unhealthyPodEvictionPolicy:

  # -- Labels to add to the query pod.
  podLabels: {}

  # -- Annotations to add to the query pod.
  podAnnotations: {}

  containerPorts:
    grpc: 10901
    http: 10902

  # -- Security context for the query pod.
  # @default -- See _values.yaml_
  podSecurityContext:
    fsGroup: 65534
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- (string) Priority class name for the query pod.
  priorityClassName:

  # -- (int) Termination grace period for the query pod; in seconds.
  terminationGracePeriodSeconds:

  # -- Security context for the query pod default container.
  # @default -- See _values.yaml_
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- Additional environment variables for the query pod default container.
  extraEnv: []

  # -- Additional args for the query pod default container.
  extraArgs: []

  # -- Liveness probe configuration for the query pod default container.
  # @default -- See _values.yaml_
  livenessProbe:
    httpGet:
      path: /-/healthy
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 4

  # -- Readiness probe configuration for the query pod default container.
  # @default -- See _values.yaml_
  readinessProbe:
    httpGet:
      path: /-/ready
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 20

  # -- Resources for the query pod default container.
  resources: {}

  # -- Extra volumes for the query pod.
  extraVolumes: []

  # -- Extra volume mounts for the query pod default container.
  extraVolumeMounts: []

  # -- Enable DNS service discovery.
  enableDnsDiscovery: true

  # -- Node selector labels for scheduling the pod (override commons).
  # nodeSelector: {}

  # -- Affinity settings for scheduling the pod (override commons).
  # affinity: {}

  # -- Topology spread constraints for scheduling for pod (override commons).
  # topologySpreadConstraints: []

  # -- Node taints pod will tolerate for scheduling (override commons).
  # tolerations: []

queryFrontend:
  # -- If `true`, create the _Thanos Query Frontend_ component.
  enabled: false

  serviceAccount:
    # -- If `true`, create a new `ServiceAccount` for the query frontend component.
    create: true
    # -- (string) If this is set and `compact.serviceAccount.create` is `true` this will be used for the created query frontend component service account name, if this is set and `compactor.serviceAccount.create` is `false` then this will define an existing service account to use for the query frontend component.
    name:
    # -- Labels to add to the query frontend service account.
    labels: {}
    # -- Annotations to add to the query frontend service account.
    annotations: {}
    # -- Automount API credentials for the query frontend service account.
    automountToken: false

  service:
    # -- Service type
    type: ClusterIP
    ports:
      http: 10902
    # -- Annotations to add to the query frontend service.
    annotations: {}
    # -- (string) Traffic distribution for the query frontend service.
    trafficDistribution: ~

  ingress:
    # -- If `true`, create an `Ingress` for the query frontend service.
    enabled: false
    # -- Annotations to add to the query frontend service ingress.
    annotations: {}
    # -- Ingress class name for the query frontend service ingress.
    ingressClassName:
    # -- Hosts for the query frontend service ingress.
    # @default -- See _values.yaml_
    hosts:
      - host: thanos-query-frontend.local
        paths:
          - path: /
            pathType: Prefix
    #   - chart-example.local
    # -- TLS configuration for the query frontend service ingress.
    # @default -- See _values.yaml_
    tls: []
    #   - hosts:
    #       - chart-example.local
    #     secretName: chart-example-tls

  # -- Number of query frontend replicas to create.
  replicas: 1

  # -- Update strategy for the query frontend deployment.
  updateStrategy: {}

  autoscaling:
    # -- If `true`, create a `HorizontalPodAutoscaler` for the query frontend deployment.
    enabled: false
    # -- Minimum number of query frontend replicas that the HPA should maintain.
    minReplicas: 1
    # -- Maximum number of query frontend replicas that the HPA should create.
    maxReplicas: 3
    # -- Target CPU utilisation percentage for the query frontend pod.
    targetCPUUtilizationPercentage: 80
    # -- (int) Target memory utilisation percentage for the query frontend pod.
    targetMemoryUtilizationPercentage:

  pdb:
    # -- If `true`, create a `PodDisruptionBudget` for the query frontend deployment.
    enabled: false
    # -- (string) Minimum number of query frontend replicas that the PDB should require to be available.
    minAvailable:
    # -- (string) Maximum number of query frontend replicas that the PDB should allow to be unavailable.
    maxUnavailable:
    # -- (string) Unhealthy pod eviction policy for the query frontend PDB.
    unhealthyPodEvictionPolicy:

  # -- Labels to add to the query frontend pod.
  podLabels: {}

  # -- Annotations to add to the query frontend pod.
  podAnnotations: {}

  containerPorts:
    http: 10902

  # -- Security context for the query frontend pod.
  # @default -- See _values.yaml_
  podSecurityContext:
    fsGroup: 65534
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- (string) Priority class name for the query frontend pod.
  priorityClassName:

  # -- (int) Termination grace period for the query frontend pod; in seconds.
  terminationGracePeriodSeconds:

  # -- Security context for the query frontend pod default container.
  # @default -- See _values.yaml_
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- Additional environment variables for the query frontend pod default container.
  extraEnv: []

  # -- Additional args for the query frontend pod default container.
  extraArgs: []

  # -- Liveness probe configuration for the query frontend pod default container.
  # @default -- See _values.yaml_
  livenessProbe:
    httpGet:
      path: /-/healthy
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 4

  # -- Readiness probe configuration for the query frontend pod default container.
  # @default -- See _values.yaml_
  readinessProbe:
    httpGet:
      path: /-/ready
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 20

  # -- Resources for the query frontend pod default container.
  resources: {}

  # -- Extra volumes for the query frontend pod.
  extraVolumes: []

  # -- Extra volume mounts for the query frontend pod default container.
  extraVolumeMounts: []

  # -- Node selector labels for scheduling the pod (override commons).
  # nodeSelector: {}

  # -- Affinity settings for scheduling the pod (override commons).
  # affinity: {}

  # -- Topology spread constraints for scheduling for pod (override commons).
  # topologySpreadConstraints: []

  # -- Node taints pod will tolerate for scheduling (override commons).
  # tolerations: []

storeGateway:
  # -- If `true`, create the store gateway component.
  enabled: true

  serviceAccount:
    # -- If `true`, create a new `ServiceAccount` for the store gateway component.
    create: true
    # -- (string) If this is set and `compact.serviceAccount.create` is `true` this will be used for the created store gateway component service account name, if this is set and `compact.serviceAccount.create` is `false` then this will define an existing service account to use for the store gateway component.
    name:
    # -- Labels to add to the store gateway service account.
    labels: {}
    # -- Annotations to add to the store gateway service account.
    annotations: {}
    # -- Automount API credentials for the store gateway service account.
    automountToken: false

  service:
    # -- Service ports
    ports:
      grpc: 10901
      http: 10902
    # -- Annotations to add to the store gateway service.
    annotations: {}
    # -- (string) Traffic distribution for the store gateway service.
    trafficDistribution:

  # -- Number of store gateway replicas to create.
  replicas: 1

  # -- Update strategy for the store gateway stateful set.
  updateStrategy: {}

  pdb:
    # -- If `true`, create a `PodDisruptionBudget` for the store gateway stateful set.
    enabled: false
    # -- (string) Minimum number of store gateway replicas that the PDB should require to be available.
    minAvailable:
    # -- (string) Maximum number of store gateway replicas that the PDB should allow to be unavailable.
    maxUnavailable:
    # -- (string) Unhealthy pod eviction policy for the store gateway PDB.
    unhealthyPodEvictionPolicy:

  # -- Labels to add to the store gateway pod.
  podLabels: {}

  # -- Annotations to add to the store gateway pod.
  podAnnotations: {}

  containerPorts:
    grpc: 10901
    http: 10902

  # -- Security context for the store gateway pod.
  # @default -- See _values.yaml_
  podSecurityContext:
    fsGroup: 65534
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- (string) Priority class name for the store gateway pod.
  priorityClassName:

  # -- (int) Termination grace period for the store gateway pod; in seconds.
  terminationGracePeriodSeconds:

  # -- Security context for the store gateway pod default container.
  # @default -- See _values.yaml_
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- Additional environment variables for the store gateway pod default container.
  extraEnv: []

  # -- Additional args for the store gateway pod default container.
  extraArgs: []

  # -- Liveness probe configuration for the store gateway pod default container.
  # @default -- See _values.yaml_
  livenessProbe:
    httpGet:
      path: /-/healthy
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 4

  # -- Readiness probe configuration for the store gateway pod default container.
  # @default -- See _values.yaml_
  readinessProbe:
    httpGet:
      path: /-/ready
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 20

  # -- Resources for the store gateway pod default container.
  resources: {}

  # -- Extra volumes for the store gateway pod.
  extraVolumes: []

  # -- Extra volume mounts for the store gateway pod default container.
  extraVolumeMounts: []

  persistence:
    # -- If `true`, create a `PersistentVolumeClaim` for the store gateway pod data.
    enabled: false
    # -- Annotations to add to the store gateway pod PVC.
    annotations: {}
    # -- Access mode for the store gateway pod PVC.
    accessMode: ReadWriteOnce
    # -- Storage class for the store gateway pod PVC.
    storageClass: ""
    # -- Size for the store gateway pod PVC.
    size: 8Gi
    # -- If `true`, retain the store gateway PVC after the pod is deleted.
    retainDeleted: true
    # -- If `true`, retain the store gateway PVC after the pod is scaled down.
    retainScaled: true

  # -- Node selector labels for scheduling the pod (override commons).
  # nodeSelector: {}

  # -- Affinity settings for scheduling the pod (override commons).
  # affinity: {}

  # -- Topology spread constraints for scheduling for pod (override commons).
  # topologySpreadConstraints: []

  # -- Node taints pod will tolerate for scheduling (override commons).
  # tolerations: []

compactor:
  # -- If `true`, create component.
  enabled: false

  deduplication:
    # -- If `true`, enable deduplication via the compactor component.
    enabled: true
    # -- (string) If specified override the default deduplication function.
    func:

  serviceAccount:
    # -- If `true`, create a new `ServiceAccount` for the compactor component.
    create: true
    # -- (string) If this is set and `compact.serviceAccount.create` is `true` this will be used for the created compactor component service account name, if this is set and `compact.serviceAccount.create` is `false` then this will define an existing service account to use for the compactor component.
    name:
    # -- Labels to add to the compactor service account.
    labels: {}
    # -- Annotations to add to the compactor service account.
    annotations: {}
    # -- Automount API credentials for the compactor service account.
    automountToken: false

  service:
    # -- Service ports
    ports:
      http: 10902
    # -- Annotations to add to the compactor service.
    annotations: {}

  # -- Update strategy for the compactor stateful set.
  updateStrategy: {}

  # -- Labels to add to the compactor pod.
  podLabels: {}

  # -- Annotations to add to the compactor pod.
  podAnnotations: {}

  containerPorts:
    http: 10902

  # -- Security context for the compactor pod.
  # @default -- See _values.yaml_
  podSecurityContext:
    fsGroup: 65534
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- (string) Priority class name for the compactor pod.
  priorityClassName:

  # -- (int) Termination grace period for the compactor pod; in seconds.
  terminationGracePeriodSeconds:

  # -- Security context for the compactor pod default container.
  # @default -- See _values.yaml_
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- Additional environment variables for the compactor pod default container.
  extraEnv: []

  # -- Additional args for the compactor pod default container.
  extraArgs: []

  # -- Liveness probe configuration for the compactor pod default container.
  # @default -- See _values.yaml_
  livenessProbe:
    httpGet:
      path: /-/healthy
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 4

  # -- Readiness probe configuration for the compactor pod default container.
  # @default -- See _values.yaml_
  readinessProbe:
    httpGet:
      path: /-/ready
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 20

  # -- Resources for the compactor pod default container.
  resources: {}

  persistence:
    # -- If `true`, create a `PersistentVolumeClaim` for the compactor pod data.
    enabled: false
    # -- Annotations to add to the compactor pod PVC.
    annotations: {}
    # -- Access mode for the compactor pod PVC.
    accessMode: ReadWriteOnce
    # -- Storage class for the pod PVC.
    storageClass: ""
    # -- Size for the compactor pod PVC.
    size: 8Gi
    # -- If `true`, retain the compactor PVC after the pod is deleted.
    retainDeleted: true
    # -- If `true`, retain the compactor PVC after the pod is scaled down.
    retainScaled: true

  # -- Extra volumes for the compactor pod.
  extraVolumes: []

  # -- Extra volume mounts for the compactor pod default container.
  extraVolumeMounts: []

  # -- Node selector labels for scheduling the pod (override commons).
  # nodeSelector: {}

  # -- Affinity settings for scheduling the pod (override commons).
  # affinity: {}

  # -- Topology spread constraints for scheduling for pod (override commons).
  # topologySpreadConstraints: []

  # -- Node taints pod will tolerate for scheduling (override commons).
  # tolerations: []

ruler:
  # -- If `true`, create the ruler component.
  enabled: false

  # -- If `true`, add a `thanos_rule` label to `<NAMESPACE>/<RULE_FULLNAME>` on a `Rule` metrics.
  instanceLabel: false

  # -- Local disk block retention period for the ruler component (`--tsdb.retention`).
  retention: 48h

  # -- Block duration for the ruler component (`--tsdb.block-duration`).
  blockDuration: 2h

  # -- Rule eval interval for the ruler component (`--eval-interval`).
  evalInterval: 1m

  serviceAccount:
    # -- If `true`, create a new `ServiceAccount` for the ruler component.
    create: true
    # -- (string) If this is set and `compact.serviceAccount.create` is `true` this will be used for the created ruler component service account name, if this is set and `compact.serviceAccount.create` is `false` then this will define an existing service account to use for the ruler component.
    name:
    # -- Labels to add to the ruler service account.
    labels: {}
    # -- Annotations to add to the ruler service account.
    annotations: {}
    # -- Automount API credentials for the ruler service account.
    automountToken: false

  service:
    # -- Service type
    type: ClusterIP
    # -- Service ports
    ports:
      grpc: 10901
      http: 10902
    # -- Annotations to add to the ruler service.
    annotations: {}
    # -- (string) Traffic distribution for service.
    trafficDistribution: ~

  ingress:
    # -- If `true`, create an `Ingress` for the ruler service.
    enabled: false
    # -- Annotations to add to the ruler service ingress.
    annotations: {}
    # -- Ingress class name for the ruler service ingress.
    ingressClassName:
    # -- Hosts for the ruler service ingress.
    # @default -- See _values.yaml_
    hosts:
      - host: thanos-ruler.local
        paths:
          - path: /
            pathType: Prefix
    #   - chart-example.local
    # -- TLS configuration for the ruler service ingress.
    # @default -- See _values.yaml_
    tls: []
    #   - hosts:
    #       - chart-example.local
    #     secretName: chart-example-tls

  # -- Number of ruler replicas to create.
  replicas: 1

  # -- Update strategy for the ruler stateful set.
  updateStrategy: {}

  pdb:
    # -- If `true`, create a `PodDisruptionBudget` for the ruler stateful set.
    enabled: false
    # -- (string) Minimum number of ruler replicas that the PDB should require to be available.
    minAvailable:
    # -- (string) Maximum number of ruler replicas that the PDB should allow to be unavailable.
    maxUnavailable:
    # -- (string) Unhealthy pod eviction policy for the ruler PDB.
    unhealthyPodEvictionPolicy:

  # -- Labels to add to the ruler pod.
  podLabels: {}

  # -- Annotations to add to the ruler pod.
  podAnnotations: {}

  containerPorts:
    grpc: 10901
    http: 10902

  # -- Security context for the ruler pod.
  # @default -- See _values.yaml_
  podSecurityContext:
    fsGroup: 65534
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- (string) Priority class name for the ruler pod.
  priorityClassName:

  # -- (int) Termination grace period for the ruler pod; in seconds.
  terminationGracePeriodSeconds:

  # -- Security context for the ruler pod default container.
  # @default -- See _values.yaml_
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- Additional environment variables for the ruler pod default container.
  extraEnv: []

  # -- Additional args for the ruler pod default container.
  extraArgs: []

  # -- Liveness probe configuration for the ruler pod default container.
  # @default -- See _values.yaml_
  livenessProbe:
    httpGet:
      path: /-/healthy
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 4

  # -- Readiness probe configuration for the ruler pod default container.
  # @default -- See _values.yaml_
  readinessProbe:
    httpGet:
      path: /-/ready
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 20

  # -- Resources for the ruler pod default container.
  resources: {}

  persistence:
    # -- If `true`, create a `PersistentVolumeClaim` for the ruler pod data.
    enabled: false
    # -- Annotations to add to the ruler pod PVC.
    annotations: {}
    # -- Access mode for the ruler pod PVC.
    accessMode: ReadWriteOnce
    # -- Storage class for the ruler pod PVC.
    storageClass: ""
    # -- Size for the ruler pod PVC.
    size: 8Gi
    # -- If `true`, retain the ruler PVC after the pod is deleted.
    retainDeleted: true
    # -- If `true`, retain the ruler PVC after the pod is scaled down.
    retainScaled: true

  # -- Extra volumes for the ruler pod.
  extraVolumes: []

  # -- Extra volume mounts for the ruler pod default container.
  extraVolumeMounts: []

  configReloader:
    # -- If `true`, create the ruler pod config reloader sidecar container.
    enabled: true
    image:
      # -- Image repository for the ruler pod config reloader sidecar container.
      repository: ghcr.io/jimmidyson/configmap-reload
      # -- Image tag for the ruler pod config reloader sidecar container.
      tag: v0.15.0
      # -- Image digest for the ruler pod config reloader sidecar container.
      digest:
      # -- Image pull policy for the ruler pod config reloader sidecar container.
      pullPolicy: IfNotPresent
    # -- Resources for the ruler pod config reloader sidecar container.
    resources: {}
    # -- Extra volume mounts for the ruler pod config reloader sidecar container.
    extraVolumeMounts: []

    # -- Node selector labels for scheduling the pod (override commons).
    # nodeSelector: {}

    # -- Affinity settings for scheduling the pod (override commons).
    # affinity: {}

    # -- Topology spread constraints for scheduling for pod (override commons).
    # topologySpreadConstraints: []

    # -- Node taints pod will tolerate for scheduling (override commons).
    # tolerations: []

  alertmanagersConfig:
    # -- If `true`, create a `Secret` for the ruler component alertmanagers configuration.
    create: true
    # -- (string) If this is set and `rule.alertmanagersConfig.create` is `true` this will be used for the created secret name, if this is set and `rule.alertmanagersConfig.create` is `false` then this will define an existing secret to use.
    name:
    # -- Secret key for the ruler component alertmanagers configuration.
    key: config
    # -- Alert managers configuration for the ruler component.
    value: |-
      alertmanagers: []

  rules:
    # -- If `true`, create a `ConfigMap` for the ruler component rules.
    create: true
    # -- (string) If this is set and `rule.rules.create` is `true` this will be used for the created config map name, if this is set and `rule.rules.create` is `false` then this will define an existing config map to use.
    name:
    # Rules for the ruler component.
    value: ~

receiver:
  # -- If `true`, create the receiver ingestor & receiver router components.
  enabled: false

  # -- Replication factor for the receiver components.
  replicationFactor: 1

  # -- Retention for the receiver components.
  retention: 48h

  # -- HTTP port for remote write
  httpRemoteWritePort: 19291

  ingestor:
    serviceAccount:
      # -- If `true`, create a new `ServiceAccount` for the receiver ingestor component.
      create: true
      # -- (string) If this is set and `compact.serviceAccount.create` is `true` this will be used for the created receiver ingestor component service account name, if this is set and `compact.serviceAccount.create` is `false` then this will define an existing service account to use for the receiver ingestor component.
      name:
      # -- Labels to add to the receiver ingestor service account.
      labels: {}
      # -- Annotations to add to the receiver ingestor service account.
      annotations: {}
      # -- Automount API credentials for the receiver ingestor service account.
      automountToken: false

    service:
      # -- Service ports
      ports:
        grpc: 10901
        http: 10902
      # -- Annotations to add to the receiver ingestor service.
      annotations: {}

    # -- Number of receiver ingestor replicas to create.
    replicas: 1

    # -- Update strategy for the receiver ingestor stateful set.
    updateStrategy: {}

    pdb:
      # -- If `true`, create a `PodDisruptionBudget` for the receiver ingestor stateful set.
      enabled: false
      # -- (string) Minimum number of receiver ingestor replicas that the PDB should require to be available.
      minAvailable:
      # -- (string) Maximum number of receiver ingestor replicas that the PDB should allow to be unavailable.
      maxUnavailable:
      # -- (string) Unhealthy pod eviction policy for the receiver ingestor PDB.
      unhealthyPodEvictionPolicy:

    # -- Labels to add to the receiver ingestor pod.
    podLabels: {}

    # -- Annotations to add to the receiver ingestor pod.
    podAnnotations: {}

    containerPorts:
      grpc: 10901
      http: 10902

    # -- Security context for the receiver ingestor pod.
    # @default -- See _values.yaml_
    podSecurityContext:
      fsGroup: 65534
      runAsGroup: 65532
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault

    # -- (string) Priority class name for the receiver ingestor pod.
    priorityClassName:

    # -- (int) Termination grace period for the receiver ingestor pod; in seconds.
    terminationGracePeriodSeconds:

    # -- Security context for the receiver ingestor pod default container.
    # @default -- See _values.yaml_
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsGroup: 65532
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault

    # -- Additional environment variables for the receiver ingestor pod default container.
    extraEnv: []

    # -- Additional args for the receiver ingestor pod default container.
    extraArgs: []

    # -- Liveness probe configuration for the receiver ingestor pod default container.
    # @default -- See _values.yaml_
    livenessProbe:
      httpGet:
        path: /-/healthy
        port: http
        scheme: HTTP
      initialDelaySeconds: 0
      periodSeconds: 30
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 4

    # -- Readiness probe configuration for the receiver ingestor pod default container.
    # @default -- See _values.yaml_
    readinessProbe:
      httpGet:
        path: /-/ready
        port: http
        scheme: HTTP
      initialDelaySeconds: 0
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 20

    # -- Resources for the receiver ingestor pod default container.
    resources: {}

    persistence:
      # -- If `true`, create a `PersistentVolumeClaim` for the receiver ingestor pod data.
      enabled: false
      # -- Annotations to add to the receiver ingestor pod PVC.
      annotations: {}
      # -- Access mode for the receiver ingestor pod PVC.
      accessMode: ReadWriteOnce
      # -- Storage class for the receiver ingestor pod PVC.
      storageClass: ""
      # -- Size for the receiver ingestor pod PVC.
      size: 8Gi
      # -- If `true`, retain the receiver ingestor PVC after the pod is deleted.
      retainDeleted: true
      # -- If `true`, retain the receiver ingestor PVC after the pod is scaled down.
      retainScaled: true

    # -- Extra volumes for the receiver ingestor pod.
    extraVolumes: []

    # -- Extra volume mounts for the receiver ingestor pod default container.
    extraVolumeMounts: []

    # -- Node selector labels for scheduling the receiver ingestor pod.
    nodeSelector: {}

    # -- Affinity settings for scheduling the receiver ingestor pod. If an explicit label selector is not provided for pod affinity or pod anti-affinity one will be created from the pod selector labels.
    affinity: {}

    # -- Topology spread constraints for scheduling for the receiver ingestor pod. If an explicit label selector is not provided one will be created from the pod selector labels.
    topologySpreadConstraints: []

    # -- Node taints the receiver ingestor pod will tolerate for scheduling.
    tolerations: []

  router:
    serviceAccount:
      # -- If `true`, create a new `ServiceAccount` for the receiver router component.
      create: true
      # -- (string) If this is set and `compact.serviceAccount.create` is `true` this will be used for the created receiver router component service account name, if this is set and `compact.serviceAccount.create` is `false` then this will define an existing service account to use for the receiver router component.
      name:
      # -- Labels to add to the receiver router service account.
      labels: {}
      # -- Annotations to add to the receiver router service account.
      annotations: {}
      # -- Automount API credentials for the receiver router service account.
      automountToken: false

    service:
      # -- Service ports
      ports:
        grpc: 10901
        http: 10902
      # -- Annotations to add to the receiver router service.
      annotations: {}

    ingress:
      # -- If `true`, create an `Ingress` for the receiver router service.
      enabled: false
      # -- Annotations to add to the receiver router service ingress.
      annotations: {}
      # -- Ingress class name for the receiver router service ingress.
      ingressClassName:
      # -- Hosts for the receiver router service ingress.
      # @default -- See _values.yaml_
      hosts:
        - host: thanos-receiver-router.local
          paths:
            - path: "/api/v1/receive"
              pathType: Prefix
              backend:
                service:
                  port:
                    name: http-rem-write
            - path: "/"
              pathType: Prefix
              backend:
                service:
                  port:
                    name: http
      #   - chart-example.local
      # -- TLS configuration for the receiver router service ingress.
      # @default -- See _values.yaml_
      tls: []
      #   - hosts:
      #       - chart-example.local
      #     secretName: chart-example-tls

    # -- Number of receiver router replicas to create.
    replicas: 1

    # -- Update strategy for the receiver router deployment.
    updateStrategy: {}

    autoscaling:
      # -- If `true`, create a `HorizontalPodAutoscaler` for the receiver router deployment.
      enabled: false
      # -- Minimum number of receiver router replicas that the HPA should maintain.
      minReplicas: 1
      # -- Maximum number of receiver router replicas that the HPA should create.
      maxReplicas: 3
      # -- Target CPU utilisation percentage for the receiver router pod.
      targetCPUUtilizationPercentage: 80
      # -- (int) Target memory utilisation percentage for the receiver router pod.
      targetMemoryUtilizationPercentage:

    pdb:
      # -- If `true`, create a `PodDisruptionBudget` for the receiver router deployment.
      enabled: false
      # -- (string) Minimum number of receiver router replicas that the PDB should require to be available.
      minAvailable:
      # -- (string) Maximum number of receiver router replicas that the PDB should allow to be unavailable.
      maxUnavailable:
      # -- (string) Unhealthy pod eviction policy for the receiver router PDB.
      unhealthyPodEvictionPolicy:

    # -- Labels to add to the receiver router pod.
    podLabels: {}

    # -- Annotations to add to the receiver router pod.
    podAnnotations: {}

    containerPorts:
      grpc: 10901
      http: 10902

    # -- Security context for the receiver router pod.
    # @default -- See _values.yaml_
    podSecurityContext:
      fsGroup: 65534
      runAsGroup: 65532
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault

    # -- (string) Priority class name for the receiver router pod.
    priorityClassName:

    # -- (int) Termination grace period for the receiver router pod; in seconds.
    terminationGracePeriodSeconds:

    # -- Security context for the receiver router pod default container.
    # @default -- See _values.yaml_
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsGroup: 65532
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault

    # -- Additional environment variables for the receiver router pod default container.
    extraEnv: []

    # -- Additional args for the receiver router pod default container.
    extraArgs: []

    # -- Liveness probe configuration for the receiver router pod default container.
    # @default -- See _values.yaml_
    livenessProbe:
      httpGet:
        path: /-/healthy
        port: http
        scheme: HTTP
      initialDelaySeconds: 0
      periodSeconds: 30
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 4

    # -- Readiness probe configuration for the receiver router pod default container.
    # @default -- See _values.yaml_
    readinessProbe:
      httpGet:
        path: /-/ready
        port: http
        scheme: HTTP
      initialDelaySeconds: 0
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 20

    # -- Resources for the receiver router pod default container.
    resources: {}

    # -- Extra volumes for the receiver router pod.
    extraVolumes: []

    # -- Extra volume mounts for the receiver router pod default container.
    extraVolumeMounts: []

    # -- Node selector labels for scheduling the receiver router pod.
    nodeSelector: {}

    # -- Affinity settings for scheduling the receiver router pod. If an explicit label selector is not provided for pod affinity or pod anti-affinity one will be created from the pod selector labels.
    affinity: {}

    # -- Topology spread constraints for scheduling for the receiver router pod. If an explicit label selector is not provided one will be created from the pod selector labels.
    topologySpreadConstraints: []

    # -- Node taints the receiver router pod will tolerate for scheduling.
    tolerations: []


bucketweb:
  # -- If `true`, create the bucket web component.
  enabled: false
  # -- Refresh interval to download metadata from remote storage
  refresh: "30m"
  # -- Timeout to download metadata from remote storage
  timeout: "5m"

  serviceAccount:
    # -- If `true`, create a new `ServiceAccount` for the component.
    create: true
    # -- (string) If this is set and `bucketweb.serviceAccount.create` is `true` this will be used for the created bucket web component service account name, if this is set and `bucketweb.serviceAccount.create` is `false` then this will define an existing service account to use for the bucket web component.
    name: ~
    # -- Labels to add to the bucket web service account.
    labels: {}
    # -- Annotations to add to the bucket web service account.
    annotations: {}
    # -- Automount API credentials for the bucket web service account.
    automountToken: false

  service:
    # -- Service type for the service.
    type: ClusterIP
    # -- (int) Port for the service.
    ports:
      http: 10902
    # -- Annotations to add to the service.
    annotations: {}
    # -- (string) Traffic distribution for service.
    trafficDistribution: ~

  ingress:
    # -- If `true`, create an `Ingress` for the bucket web service.
    enabled: false
    # -- Annotations to add to the bucket web service ingress.
    annotations: {}
    # -- Ingress class name for the bucket web service ingress.
    ingressClassName:
    # -- Hosts for the bucket web service ingress.
    # @default -- See _values.yaml_
    hosts:
      - host: thanos-bucketweb.local
        paths:
          - path: /
            pathType: Prefix
    #   - chart-example.local
    # -- TLS configuration for the bucket web service ingress.
    # @default -- See _values.yaml_
    tls: []
    #   - hosts:
    #       - chart-example.local
    #     secretName: chart-example-tls

  # -- Number of bucket web replicas to create.
  replicas: 1

  # -- Update strategy for the bucket web deployment.
  updateStrategy: {}

  autoscaling:
    # -- If `true`, create a `HorizontalPodAutoscaler` for the bucket web deployment.
    enabled: false
    # -- Minimum number of bucket web replicas that the HPA should maintain.
    minReplicas: 1
    # -- Maximum number of bucket web replicas that the HPA should create.
    maxReplicas: 3
    # -- Target CPU utilization percentage for the bucket web pod.
    targetCPUUtilizationPercentage: 80
    # -- (int) Target memory utilization percentage for the bucket web pod.
    targetMemoryUtilizationPercentage: ~

  pdb:
    # -- If `true`, create a `PodDisruptionBudget` for the bucket web deployment.
    enabled: false
    # -- (string) Minimum number of bucket web replicas that the PDB should require to be available.
    minAvailable:
    # -- (string) Maximum number of bucket web replicas that the PDB should allow to be unavailable.
    maxUnavailable:
    # -- (string) Unhealthy pod eviction policy for the bucket web PDB.
    unhealthyPodEvictionPolicy:

  # -- Labels to add to the bucket web pod.
  podLabels: {}

  # -- Annotations to add to the bucket web pod.
  podAnnotations: {}

  containerPorts:
    http: 10902

  # -- Security context for the bucket web pod.
  # @default -- See _values.yaml_
  podSecurityContext:
    fsGroup: 65534
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- (string) Priority class name for the bucket web pod.
  priorityClassName:

  # -- (int) Termination grace period for the bucket web pod; in seconds.
  terminationGracePeriodSeconds:

  # -- Security context for the bucket web pod default container.
  # @default -- See _values.yaml_
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault

  # -- Additional environment variables for the bucket web pod default container.
  extraEnv: []

  # -- Additional args for the bucket web pod default container.
  extraArgs: []

  # -- Liveness probe configuration for the bucket web pod default container.
  # @default -- See _values.yaml_
  livenessProbe:
    httpGet:
      path: /-/healthy
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 4

  # -- Readiness probe configuration for the bucket web pod default container.
  # @default -- See _values.yaml_
  readinessProbe:
    httpGet:
      path: /-/ready
      port: http
      scheme: HTTP
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 20

  # -- Resources for the bucket web pod default container.
  resources: {}

  # -- Extra volumes for the bucket web pod.
  extraVolumes: []

  # -- Extra volume mounts for the bucket web pod default container.
  extraVolumeMounts: []

  # -- Node selector labels for scheduling the pod (override commons).
  # nodeSelector: {}

  # -- Affinity settings for scheduling the pod (override commons).
  # affinity: {}

  # -- Topology spread constraints for scheduling for pod (override commons).
  # topologySpreadConstraints: []

  # -- Node taints pod will tolerate for scheduling (override commons).
  # tolerations: []
