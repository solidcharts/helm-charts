# Default values for rabbitmq.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

managementPlugin:
  ## -- Set to true to enable the RabbitMQ management plugin.
  enabled: true

serviceAccount:
  # -- If `true`, create a new `ServiceAccount` for the component.
  create: true
  # -- (string) If this is set and `serviceAccount.create` is `true` this will be used for the created component service account name, if this is set and `serviceAccount.create` is `false` then this will define an existing service account to use for the component.
  name: ~
  # -- Labels to add to the bucket web service account.
  labels: {}
  # -- Annotations to add to the bucket web service account.
  annotations: {}
  # -- Automount API credentials for the bucket web service account.
  automountToken: false

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Service type
  type: ClusterIP
  ports:
    # -- RabbitMQ AMQP service port
    amqp: 5672
    # -- RabbitMQ HTTP management service port
    mgmt: 15672
    # -- RabbitMQ epmd service port
    epmd: 4369
    # -- RabbitMQ Erlang distribution service port
    dist: 25672
    # -- RabbitMQ metrics service port
    metrics: 15692

metrics:
  ## -- Set to true to enable the Prometheus metrics
  enabled: false
  serviceMonitor:
    # -- If `true`, create a ServiceMonitor for the Prometheus Operator
    enabled: false
    ## -- Additional labels for the ServiceMonitor
    labels: {}
    ## -- Additional annotations for the ServiceMonitor
    annotations: {}
    # -- Label to use as the `jobLabel`.
    jobLabel: ~
    # -- Endpoint configuration for the service monitor endpoint.
    endpointConfig:
      path: /metrics
      interval: 30s
      scrapeTimeout: 10s

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  # -- If `true`, create an `Ingress`
  enabled: false
  # -- Annotations to add to the ingress
  annotations: {}
  # -- Ingress class name
  ingressClassName: ""
  # -- Hosts for the ingress.
  hosts:
    - host: rabbitmq.local
      paths:
        - path: /
          pathType: Prefix
  # -- TLS configuration for the service ingress
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
