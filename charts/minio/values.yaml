## -- Global parameters
global:
  ## -- Global Image registry
  imageRegistry: ""

nameOverride: ""
fullnameOverride: ""

## -- MinIO Authentication
auth:
  ## -- MinIO default username
  rootUsername: minio
  ## -- MinIO password (if empty, a random password will be generated)
  rootPassword: ""
  ## -- Name of existing secret containing RabbitMQ erlang cookie
  existingRootUsernameSecret: ""
  ## -- Key in an existing secret containing Erlang cookie
  existingRootUsernameSecretKey: "root-user"
  ## -- Name of existing secret containing RabbitMQ password
  existingRootPasswordSecret: ""
  ## -- Key in an existing secret containing RabbitMQ password
  existingRootPasswordSecretKey: "root-password"

image:
  # -- Image registry
  registry: docker.io
  # -- Image repository
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion
  tag: ""

# -- Image pull secrets for pulling an image from a private repository
imagePullSecrets: []

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the update strategy for deployment.
updateStrategy: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # -- (string) If this is set and `serviceAccount.create` is `true` this will be used for the created component service account name, if this is set and `serviceAccount.create` is `false` then this will define an existing service account to use for the pod
  name: ""
  # -- Annotations to add to the service account
  annotations: {}
  # -- Automatically mount a ServiceAccount's API credentials?
  automountToken: true

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Service type
  type: ClusterIP
  # -- Service annotations
  annotations: {}
  ports:
    minio: 9000
    console: 9090

ingress:
  minio:
    # -- If `true`, create an Ingress for MinIO API
    enabled: false
    # -- Annotations to add to the ingress
    annotations: {}
    # -- Ingress class name
    ingressClassName: ""
    hosts:
      - host: minio.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  console:
    # -- If `true`, create an Ingress for MinIO Console
    enabled: false
    # -- Annotations to add to the ingress
    annotations: {}
    # -- Ingress class name
    ingressClassName: ""
    hosts:
      - host: minio-console.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

persistence:
  ## -- Enable persistent storage
  enabled: true
  ## -- If `true`, use an existing PVC instead of creating a new one.
  existingClaim: ~
  # -- Annotations to add to the pod PVC.
  annotations: {}
  ## -- Storage class to use for persistent volume
  storageClass: ""
  ## -- Persistent Volume access modes
  accessMode: ReadWriteOnce
  ## -- Size of persistent volume
  size: 8Gi
  # -- If `true`, retain the PVC after the pod is deleted.
  retainDeleted: true
  # -- If `true`, retain the PVC after the pod is scaled down.
  retainScaled: true

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
